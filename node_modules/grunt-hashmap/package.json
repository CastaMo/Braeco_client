{
  "name": "grunt-hashmap",
  "description": "Generate a hash mapping for your assets, to burst cache",
  "version": "0.1.5",
  "homepage": "https://github.com/ktmud/grunt-hashmap",
  "author": {
    "name": "ktmud",
    "email": "kissmud@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ktmud/grunt-hashmap.git"
  },
  "bugs": {
    "url": "https://github.com/ktmud/grunt-hashmap/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ktmud/grunt-hashmap/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "hash",
    "static",
    "deploy",
    "assets"
  ],
  "readme": "# grunt-hashmap [![Build Status](https://api.travis-ci.org/ktmud/grunt-hashmap.png?branch=master)](https://travis-ci.org/ktmud/grunt-hashmap)\n\n> Generate a hash mapping for your assets files, in order to burst cache\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-hashmap --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-hashmap');\n```\n\n## The \"hashmap\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `hashmap` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  hashmap: {\n    options: {\n      // These are default options\n      output: '#{= dest}/hash.json',\n      etag: null, // See below([#](#option-etag))\n      algorithm: 'md5', // the algorithm to create the hash\n      rename: '#{= dirname}/#{= basename}_#{= hash}#{= extname}', // save the original file as what\n      keep: true, // should we keep the original file or not\n      merge: false, // merge hash results into existing `hash.json` file or override it.\n      hashlen: 10, // length for hashsum digest\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n      options: {\n        output: 'static/versions.json',\n      },\n      files: {\n        cwd: 'static/dist',\n        src: ['js/**/*.js', 'css/**/*.css'],\n        dest: 'static/dist'\n      },\n    },\n  },\n})\n```\n\nIn your express application, add a **static_url** generator to template helpers:\n\n``` javascript\nvar path = require('path');\nvar hash_cache = require('./static/hash.json');\n\nvar reg_css_js = /\\.(css|js)$/;\n\n// change these consts according to the app's running environment\nvar STATIC_ROOT = 'http://img.example.com';\nvar DEBUG = false;\n\nfunction static_url(p) {\n  if (p[0] == '/') p = p.slice(1);\n  if (DEBUG || !reg_css_js.test(p)) return STATIC_ROOT + '/' + p;\n\n  var hash = hash_cache[p];\n  if (hash) {\n    var ext = path.extname(p);\n    p = path.join(path.dirname(p), path.basename(p, ext) + '_' + hash + ext); \n  }\n  return STATIC_ROOT + '/' + p;\n}\n\n\napp.locals({\n  static: static_url\n});\n```\n\nIn your template, always refer to static file url like this:\n\n``` jade\nscript(src=\"#{static('/css/abc.css')}\")\n```\n\nThe output would be:\n\n```\n<script type=\"text/javascript\" src=\"http://img.example.com/css/abc_83hfa2gi.css\"></script>\n\n<!-- or when in debug mode: -->\n<script type=\"text/javascript\" src=\"/css/abc.css\"></script>\n```\n\n\n### Options\n\n#### options.output\nType: `String`\nDefault value: `'#{= dest}/hash.json'`\n\nWhere to save the hash mapping json file.\nAvailable variables are `dest`, `cwd`.\nYou can always use `#{= grunt.config.get(...) }'` to access config data in your `Gruntfile`.\n\nSet to `null` will disable the output.\n\nThe output format:\n\n```js\n{\n  \"a/b.js\": \"aaa93n3f2\",\n  \"foo.css\": \"maaof33mao\"\n}\n```\n\n#### options.etag <a id=\"option-etag\"></a>\nType: `String`\nDefault value: `null`\n\nIn spite of standard digest algorithms provided by the\n[crypto]('http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm') module,\nyou can set a \"etag\" format to use as file version.\n\nSet `etag` to `true` will use the default format: `#{= size}-#{= +mtime}`.\n\nAll values in a [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats) result are available.\n\n#### options.algorithm\nType: `String`\nDefault value: `'md5'`\n\nThe algorithm to generate hash digests. Depend on the version of OpenSSL on the platform.\nExamples are `'sha1'`, `'md5'`, `'sha256'`, etc.\n\n#### options.hashlen\nType: `Number`\nDefault value: `10`\n\nThe length of a hash digest hex value.\n\n#### options.rename\nType: `String`\nDefault value: `'#{= dirname}/#{= basename}\\_#{= hash}#{= extname}'`\n\nRename files, to include a hash in it. This is often for safely bursting cache.\nAvailable variables are:\n\n  - **hash**      - The hash/etag value.\n  - **dest**      - The destination directory.\n  - **cwd**       - The `cwd` you setted for `files` prop section.\n  - **filepath**  - The path of the file.\n  - **basename**  - The basename of the file, with extension name excluded.\n  - **dirname**   - The directory name of the file.\n  - **extname**   - The extension name of the file.\n\nExamples:\n\n    \"abc/defg/hijk.js\" =>\n    {\n      filepath: \"abc/defg/hijk.js\",\n      basename: \"hijk\",\n      dirname: \"abc/defg\",\n      extname: \"js\"\n    }\n\nWith the default rename format, the result will be something like `\"abc/defg/hijk\\_e8e7f9e4.js\"`.\n\nWill raise a warning if the renamed target is not in dest directory.\n  \n#### options.keep\nType: `String`\nDefault value: `true`\n\nWhether to keep the original files after rename it.\n\n#### options.merge\nType: `String`\nDefault value: `false`\n\nThis option is mainly for cases like this:\n\n```js\ngrunt.initConfig({\n  hashmap: {\n    options: {\n      output: 'static/hash.json',\n      merge: true,\n    },\n    js: {\n      cwd: 'static/dist',\n      src: 'js/**/*.js',\n      dest: 'static/dist'\n    },\n    css: {\n      cwd: 'static/dist',\n      src: 'css/**/*.css',\n      dest: 'static/dist'\n    },\n  },\n  watch: {\n    js: {\n      files: ['static/js/**/*.js'],\n      tasks: ['hashmap:js']\n    }, \n    css: {\n      files: ['static/css/**/*.css'],\n      tasks: ['hashmap:css']\n    }\n  },\n})\n```\n\nHashmap tasks for css and js are created seperately.\nSo with the `grunt-contrib-watch` running, when you modify one single file,\ngrunt won't need to run the whole hash mapping process for all files.\n\nSince all the hash results will be written to the same file, and the hashmaps\nare automatically merged. It is safe to refer to `hash.json` for all static files\nin your application's static url generator.\n\nThe downside of this practice is that hashes for deleted files will never be removed,\nunless `hash.json` is removed. But of course, you can always set up a `grunt clean` task. \n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n* 0.1.5 -  add option.salt to burst all the cache, thanks @theoephraim \n* 0.1.4 -  format output json, and sort it by filenames (diff a hashmap made easy). Thanks @dpolivy !\n* 0.1.1 -  add options.encoding for file contents reading\n* 0.1.0 -  first release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-hashmap@0.1.5",
  "dist": {
    "shasum": "b67e3f42a5ef4943aaf700d6e90173737338aea8",
    "tarball": "http://registry.npmjs.org/grunt-hashmap/-/grunt-hashmap-0.1.5.tgz"
  },
  "_from": "grunt-hashmap@*",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "ktmud",
    "email": "jyyjcc@gmail.com"
  },
  "maintainers": [
    {
      "name": "ktmud",
      "email": "jyyjcc@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "b67e3f42a5ef4943aaf700d6e90173737338aea8",
  "_resolved": "https://registry.npmjs.org/grunt-hashmap/-/grunt-hashmap-0.1.5.tgz"
}
